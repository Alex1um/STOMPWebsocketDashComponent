{"version":3,"file":"stompws.min.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external window \"React\"","webpack:///external window \"ReactDOM\"","webpack:///external window \"PropTypes\"","webpack:///./node_modules/@stomp/stompjs/esm6/byte.js","webpack:///./node_modules/@stomp/stompjs/esm6/frame-impl.js","webpack:///./node_modules/@stomp/stompjs/esm6/parser.js","webpack:///./node_modules/@stomp/stompjs/esm6/types.js","webpack:///./node_modules/@stomp/stompjs/esm6/ticker.js","webpack:///./node_modules/@stomp/stompjs/esm6/versions.js","webpack:///./node_modules/@stomp/stompjs/esm6/stomp-handler.js","webpack:///./node_modules/@stomp/stompjs/esm6/augment-websocket.js","webpack:///./node_modules/@stomp/stompjs/esm6/client.js","webpack:///./src/lib/components/STOMPWebsocket.react.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","var getCurrentScript = function() {\n    var script = document.currentScript;\n    if (!script) {\n        /* Shim for IE11 and below */\n        /* Do not take into account async scripts and inline scripts */\n\n        var doc_scripts = document.getElementsByTagName('script');\n        var scripts = [];\n\n        for (var i = 0; i < doc_scripts.length; i++) {\n            scripts.push(doc_scripts[i]);\n        }\n\n        scripts = scripts.filter(function(s) { return !s.async && !s.text && !s.textContent; });\n        script = scripts.slice(-1)[0];\n    }\n\n    return script;\n};\n\nvar isLocalScript = function(script) {\n    return /\\/_dash-component-suites\\//.test(script.src);\n};\n\nObject.defineProperty(__webpack_require__, 'p', {\n    get: (function () {\n        var script = getCurrentScript();\n\n        var url = script.src.split('/').slice(0, -1).join('/') + '/';\n\n        return function() {\n            return url;\n        };\n    })()\n});\n\nif (typeof jsonpScriptSrc !== 'undefined') {\n    var __jsonpScriptSrc__ = jsonpScriptSrc;\n    jsonpScriptSrc = function(chunkId) {\n        var script = getCurrentScript();\n        var isLocal = isLocalScript(script);\n\n        var src = __jsonpScriptSrc__(chunkId);\n\n        if(!isLocal) {\n            return src;\n        }\n\n        var srcFragments = src.split('/');\n        var fileFragments = srcFragments.slice(-1)[0].split('.');\n\n        fileFragments.splice(1, 0, \"v0_0_5m1743228200\");\n        srcFragments.splice(-1, 1, fileFragments.join('.'))\n\n        return srcFragments.join('/');\n    };\n}\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"ReactDOM\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"PropTypes\"];","/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map","import { BYTE } from './byte.js';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map","/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (typeof segment === 'string') {\n            chunk = this._encoder.encode(segment);\n        }\n        else {\n            chunk = new Uint8Array(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([\n                this._headerKey,\n                this._consumeTokenAsUTF8(),\n            ]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        try {\n            this.onFrame(this._results);\n        }\n        catch (e) {\n            console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n        }\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map","/**\n * Possible states for the IStompSocket\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nexport var ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState || (ActivationState = {}));\n/**\n * Possible reconnection wait time modes\n */\nexport var ReconnectionTimeMode;\n(function (ReconnectionTimeMode) {\n    ReconnectionTimeMode[ReconnectionTimeMode[\"LINEAR\"] = 0] = \"LINEAR\";\n    ReconnectionTimeMode[ReconnectionTimeMode[\"EXPONENTIAL\"] = 1] = \"EXPONENTIAL\";\n})(ReconnectionTimeMode || (ReconnectionTimeMode = {}));\n/**\n * Possible ticker strategies for outgoing heartbeat ping\n */\nexport var TickerStrategy;\n(function (TickerStrategy) {\n    TickerStrategy[\"Interval\"] = \"interval\";\n    TickerStrategy[\"Worker\"] = \"worker\";\n})(TickerStrategy || (TickerStrategy = {}));\n//# sourceMappingURL=types.js.map","import { TickerStrategy } from './types.js';\nexport class Ticker {\n    constructor(_interval, _strategy = TickerStrategy.Interval, _debug) {\n        this._interval = _interval;\n        this._strategy = _strategy;\n        this._debug = _debug;\n        this._workerScript = `\n    var startTime = Date.now();\n    setInterval(function() {\n        self.postMessage(Date.now() - startTime);\n    }, ${this._interval});\n  `;\n    }\n    start(tick) {\n        this.stop();\n        if (this.shouldUseWorker()) {\n            this.runWorker(tick);\n        }\n        else {\n            this.runInterval(tick);\n        }\n    }\n    stop() {\n        this.disposeWorker();\n        this.disposeInterval();\n    }\n    shouldUseWorker() {\n        return typeof (Worker) !== 'undefined' && this._strategy === TickerStrategy.Worker;\n    }\n    runWorker(tick) {\n        this._debug('Using runWorker for outgoing pings');\n        if (!this._worker) {\n            this._worker = new Worker(URL.createObjectURL(new Blob([this._workerScript], { type: 'text/javascript' })));\n            this._worker.onmessage = (message) => tick(message.data);\n        }\n    }\n    runInterval(tick) {\n        this._debug('Using runInterval for outgoing pings');\n        if (!this._timer) {\n            const startTime = Date.now();\n            this._timer = setInterval(() => {\n                tick(Date.now() - startTime);\n            }, this._interval);\n        }\n    }\n    disposeWorker() {\n        if (this._worker) {\n            this._worker.terminate();\n            delete this._worker;\n            this._debug('Outgoing ping disposeWorker');\n        }\n    }\n    disposeInterval() {\n        if (this._timer) {\n            clearInterval(this._timer);\n            delete this._timer;\n            this._debug('Outgoing ping disposeInterval');\n        }\n    }\n}\n//# sourceMappingURL=ticker.js.map","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n]);\n//# sourceMappingURL=versions.js.map","import { augmentWebsocket } from './augment-websocket.js';\nimport { BYTE } from './byte.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { Parser } from './parser.js';\nimport { Ticker } from './ticker.js';\nimport { StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    constructor(_client, _webSocket, config) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._connected = false;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](https://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.debug = config.debug;\n        this.stompVersions = config.stompVersions;\n        this.connectHeaders = config.connectHeaders;\n        this.disconnectHeaders = config.disconnectHeaders;\n        this.heartbeatIncoming = config.heartbeatIncoming;\n        this.heartbeatOutgoing = config.heartbeatOutgoing;\n        this.splitLargeFrames = config.splitLargeFrames;\n        this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n        this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n        this.logRawCommunication = config.logRawCommunication;\n        this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n        this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n        this.onConnect = config.onConnect;\n        this.onDisconnect = config.onDisconnect;\n        this.onStompError = config.onStompError;\n        this.onWebSocketClose = config.onWebSocketClose;\n        this.onWebSocketError = config.onWebSocketError;\n        this.onUnhandledMessage = config.onUnhandledMessage;\n        this.onUnhandledReceipt = config.onUnhandledReceipt;\n        this.onUnhandledFrame = config.onUnhandledFrame;\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._webSocket.url}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = new Ticker(ttl, this._client.heartbeatStrategy, this.debug);\n            this._pinger.start(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            });\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this.discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    discardWebsocket() {\n        if (typeof this._webSocket.terminate !== 'function') {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        // @ts-ignore - this method will be there at this stage\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            this._pinger.stop();\n            this._pinger = undefined;\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n            this._ponger = undefined;\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map","/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const id = Math.random().toString().substring(2, 8); // A simulated id\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose?.call(webSocket, {\n            code: 4001,\n            reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map","import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, ReconnectionTimeMode, StompSocketState, TickerStrategy, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.1 and 1.0\n         *        client.stompVersions = new Versions(['1.1', '1.0'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which switches off automatic reconnection.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * tracking the time to the next reconnection. Initialized to [Client#reconnectDelay]{@link Client#reconnectDelay}'s value and it may\n         * change depending on the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode} setting\n         */\n        this._nextReconnectDelay = 0;\n        /**\n         * Maximum time to wait between reconnects, in milliseconds. Defaults to 15 minutes.\n         * Only relevant when reconnectTimeMode not LINEAR (e.g. EXPONENTIAL).\n         * Set to 0 to wait indefinitely.\n         */\n        this.maxReconnectDelay = 15 * 60 * 1000; // 15 minutes in ms\n        /**\n         * Reconnection wait time mode, either linear (default) or exponential.\n         * Note: See [Client#maxReconnectDelay]{@link Client#maxReconnectDelay} for setting the maximum delay when exponential\n         */\n        this.reconnectTimeMode = ReconnectionTimeMode.LINEAR;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * Outgoing heartbeat strategy.\n         * See https://github.com/stomp-js/stompjs/pull/579\n         *\n         * Can be worker or interval strategy, but will always use `interval`\n         * if web workers are unavailable, for example, in a non-browser environment.\n         *\n         * Using Web Workers may work better on long-running pages\n         * and mobile apps, as the browser may suspend Timers in the main page.\n         * Try the `Worker` mode if you discover disconnects when the browser tab is in the background.\n         *\n         * When used in a JS environment, use 'worker' or 'interval' as valid values.\n         *\n         * Defaults to `interval` strategy.\n         */\n        this.heartbeatStrategy = TickerStrategy.Interval;\n        /**\n         * This switches on a non-standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seem to support this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Setting it for such a broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Browsers do not immediately close WebSockets when `.close` is issued.\n         * This may cause reconnection to take a significantly long time in case\n         *  of some types of failures.\n         * In case of incoming heartbeat failure, this experimental flag instructs\n         * the library to discard the socket immediately\n         * (even before it is actually closed).\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n        // Warn on incorrect maxReconnectDelay settings\n        if (this.maxReconnectDelay > 0 &&\n            this.maxReconnectDelay < this.reconnectDelay) {\n            this.debug(`Warning: maxReconnectDelay (${this.maxReconnectDelay}ms) is less than reconnectDelay (${this.reconnectDelay}ms). Using reconnectDelay as the maxReconnectDelay delay.`);\n            this.maxReconnectDelay = this.reconnectDelay;\n        }\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect. If the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode}\n     * is set to EXPONENTIAL it will increase the wait time exponentially\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(ActivationState.ACTIVE);\n            this._nextReconnectDelay = this.reconnectDelay;\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect(this);\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            heartbeatStrategy: this.heartbeatStrategy,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this._nextReconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this._nextReconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                if (this.reconnectTimeMode === ReconnectionTimeMode.EXPONENTIAL) {\n                    this._nextReconnectDelay = this._nextReconnectDelay * 2;\n                    // Truncated exponential backoff with a set limit unless disabled\n                    if (this.maxReconnectDelay !== 0) {\n                        this._nextReconnectDelay = Math.min(this._nextReconnectDelay, this.maxReconnectDelay);\n                    }\n                }\n                this._connect();\n            }, this._nextReconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(ActivationState.DEACTIVATING);\n        // Reset reconnection timer just to be safe\n        this._nextReconnectDelay = 0;\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map","import React, { useState, useRef, useEffect } from 'react';\nimport { flushSync } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { Client } from '@stomp/stompjs';\n\n\nfunction useStompJs(url) {\n  const [lastMessage, setLastMessage] = useState(null);\n  const [readyState, setReadyState] = useState({});\n  const stompClientRef = useRef(null);\n  const startRef = useRef(() => void 0);\n  const messageQueue = useRef([]);\n  const convertedUrl = useRef(null);\n  \n  const sendMessage = useCallback((message) => {\n    if (message && stompClientRef.current?.connected) {\n      const { destination, body, headers = {} } = message;\n      stompClientRef.current.publish({\n        destination,\n        body: JSON.stringify(body),\n        headers\n      });\n    }\n  }, []);\n\n  const sendJsonMessage = useCallback((message) => {\n    message.body = JSON.stringify(message.body);\n    sendMessage(message);\n  }, [sendMessage]);\n\n  useEffect(() => {\n    if (url !== null) {\n      let removeListeners;\n      let expectClose = false;\n      let createOrJoin = true;\n\n      const start = async () => {\n        convertedUrl.current = url;\n\n        const protectedSetLastMessage = (message) => {\n          if (!expectClose) {\n            flushSync(() => setLastMessage(message));\n          }\n        };\n\n        const protectedSetReadyState = (state) => {\n          if (!expectClose) {\n            flushSync(() => setReadyState(prev => ({\n              ...prev,\n              ...(convertedUrl.current && { [convertedUrl.current]: state }),\n            })));\n          }\n        };\n\n        if (createOrJoin) {\n          removeListeners = createOrJoinSocket(\n            webSocketRef,\n            convertedUrl.current,\n            protectedSetReadyState,\n            optionsCache,\n            protectedSetLastMessage,\n            startRef,\n            reconnectCount,\n            lastMessageTime,\n            sendMessage,\n          );\n        }\n      };\n\n      startRef.current = () => {\n        if (!expectClose) {\n          if (webSocketProxy.current) webSocketProxy.current = null;\n          removeListeners?.();\n          start();\n        }\n      };\n\n      start();\n      return () => {\n        expectClose = true;\n        createOrJoin = false;\n        if (webSocketProxy.current) webSocketProxy.current = null;\n        removeListeners?.();\n        setLastMessage(null);\n      };\n    } else if (url === null || connect === false) {\n      reconnectCount.current = 0; // reset reconnection attempts\n      setReadyState(prev => ({\n        ...prev,\n        ...(convertedUrl.current && { [convertedUrl.current]: ReadyState.CLOSED }),\n      }));\n    }\n  }, [url, sendMessage]);\n}\n\n\n/**\n * ExampleComponent is an example component.\n * It takes a property, `label`, and\n * displays it.\n * It renders an input with the property `value`\n * which is editable by the user.\n */\nconst STOMPWebsocket = (props) => {\n  const {id, setProps, subscribe, send, url, message} = props;\n  const clientRef = useRef(null);\n  const subscriptionRef = useRef(null);\n  const currentTopicRef = useRef('');\n  const [rawMessage, setRawMessage] = useState();\n    \n  const stompClient = new Client({\n    brokerURL: url,\n    reconnectDelay: 5000,\n    logRawCommunication: false,\n  });\n\n  stompClient.onConnect = () => {\n    console.log('STOMP Connected');\n    // Subscribe to initial topic if exists\n    if (subscribe) {\n      subscribeToTopic(subscribe);\n    }\n  };\n\n  stompClient.activate();\n  clientRef.current = stompClient;\n\n  // Initialize STOMP client once when component mounts\n  useEffect(() => {\n    // const stompClient = new Client({\n    //   brokerURL: url,\n    //   reconnectDelay: 5000,\n    //   logRawCommunication: false,\n    // });\n\n    // stompClient.onConnect = () => {\n    //   console.log('STOMP Connected');\n    //   // Subscribe to initial topic if exists\n    //   if (subscribe) {\n    //     subscribeToTopic(subscribe);\n    //   }\n    // };\n\n    // stompClient.activate();\n    // clientRef.current = stompClient;\n\n    // return () => {\n    //   stompClient.deactivate();\n    //   console.log('STOMP Disconnected');\n    // };\n  }, []); // Empty dependency array ensures this runs only once\n\n  // Handle subscription changes\n  useEffect(() => {\n    if (subscribe !== currentTopicRef.current) {\n      if (subscriptionRef.current) {\n        subscriptionRef.current.unsubscribe();\n        currentTopicRef.current = null;\n        console.log(`Unsubscribed from ${currentTopicRef.current}`);\n      }\n      \n      if (subscribe) {\n        subscribeToTopic(subscribe);\n      }\n    }\n  }, [subscribe]);\n\n  // Handle send property changes\n  useEffect(() => {\n    if (send && clientRef.current?.connected) {\n      const { destination, body, headers = {} } = send;\n      clientRef.current.publish({\n        destination,\n        body: JSON.stringify(body),\n        headers\n      });\n      // Reset send property after sending\n      setProps({ send: null });\n    }\n  }, [send]);\n\n  const subscribeToTopic = (topic) => {\n    if (clientRef.current?.connected) {\n      subscriptionRef.current = clientRef.current.subscribe(\n        topic,\n        (message) => handleMessage(message)\n      );\n      currentTopicRef.current = topic;\n      console.log(`Subscribed to ${topic}`);\n    }\n  };\n\n  const handleMessage = (rawMessage) => {\n    try {\n      const parsedMessage = JSON.parse(rawMessage.body);\n      setRawMessage({\"data\": rawMessage});\n    } catch (error) {\n      console.error('Message parsing error:', error);\n      setRawMessage(null);\n      // setProps({ message: null });\n    }\n  };\n\n  useEffect(() => {\n    if (rawMessage) {\n      let data = rawMessage.data;\n      setProps({ message: data });\n      return () => {\n        data.destroy();\n      }\n    }\n  }, [rawMessage]);\n  \n  return <div />;\n};\n\nSTOMPWebsocket.propTypes = {\n    /**\n     * The url to connect to\n     */\n    url: PropTypes.string,\n\n    /**\n     * The topic to subscribe to.\n     */\n    subscribe: PropTypes.string,\n\n    /**\n     * The message from subscription.\n     */\n    message: PropTypes.object,\n\n    /**\n     * The message to send\n     */\n    send: PropTypes.object,\n\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n\nexport default STOMPWebsocket;\n"],"names":["url","__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","getCurrentScript","script","document","currentScript","doc_scripts","getElementsByTagName","scripts","i","length","push","filter","s","async","text","textContent","slice","src","split","join","jsonpScriptSrc","__jsonpScriptSrc__","chunkId","isLocal","test","srcFragments","fileFragments","splice","window","BYTE","FrameImpl","body","this","_body","isBinaryBody","TextDecoder","decode","_binaryBody","binaryBody","TextEncoder","encode","constructor","params","command","headers","escapeHeaderValues","skipContentLengthHeader","assign","fromRawFrame","rawFrame","trim","str","replace","header","reverse","indexOf","hdrValueUnEscape","toString","serializeCmdAndHeaders","serialize","cmdAndHeaders","toUnit8Array","buffer","lines","name","keys","hdrValueEscape","isBodyEmpty","bodyLength","sizeOfUTF8","uint8CmdAndHeaders","nullTerminator","Uint8Array","uint8Frame","set","marshall","Parser","onFrame","onIncomingPing","_encoder","_decoder","_token","_initState","parseChunk","segment","appendMissingNULLonIncoming","chunk","chunkWithNull","byte","_onByte","_collectFrame","_collectCommand","_reinjectByte","_results","_consumeTokenAsUTF8","_collectHeaders","_consumeByte","_collectHeaderKey","_setupCollectBody","_headerKey","_collectHeaderValue","undefined","contentLengthHeader","_bodyBytesRemaining","parseInt","_collectBodyFixedSize","_collectBodyNullTerminated","_retrievedBody","_consumeTokenAsRaw","e","console","log","rawResult","StompSocketState","ActivationState","ReconnectionTimeMode","TickerStrategy","Ticker","_interval","_strategy","Interval","_debug","_workerScript","start","tick","stop","shouldUseWorker","runWorker","runInterval","disposeWorker","disposeInterval","Worker","_worker","URL","createObjectURL","Blob","type","onmessage","message","data","_timer","startTime","Date","now","setInterval","terminate","clearInterval","Versions","versions","supportedVersions","protocolVersions","map","x","V1_0","V1_1","V1_2","default","StompHandler","connectedVersion","_connectedVersion","connected","_connected","_client","_webSocket","config","_serverFrameHandlers","CONNECTED","frame","debug","server","version","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","client","messageId","ack","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","stompVersions","connectHeaders","disconnectHeaders","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","logRawCommunication","discardWebsocketOnCommFailure","onDisconnect","onWebSocketClose","onWebSocketError","onUnhandledFrame","parser","evt","rawChunkAsString","ArrayBuffer","onclose","closeEvent","_cleanUp","onerror","errorEvent","onopen","_transmit","serverOutgoing","serverIncoming","v","ttl","Math","max","_pinger","heartbeatStrategy","readyState","OPEN","send","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocket","_closeWebsocket","forceDisconnect","CONNECTING","close","webSocket","msg","noOp","ts","id","random","substring","origOnClose","delay","getTime","code","reason","wasClean","rawChunk","out","dispose","receipt","watchForReceipt","error","publish","destination","hdrs","receiptId","subscribe","unsubscribe","begin","transactionId","txId","transaction","commit","abort","subscriptionId","Client","_stompHandler","_disconnectHeaders","active","state","ACTIVE","_changeState","onChangeState","conf","connectionTimeout","reconnectDelay","_nextReconnectDelay","maxReconnectDelay","reconnectTimeMode","LINEAR","INACTIVE","beforeConnect","configure","activate","_activate","_connect","DEACTIVATING","deactivate","then","_connectionWatcher","clearTimeout","setTimeout","_createWebSocket","_disposeStompHandler","_schedule_reconnect","webSocketFactory","brokerURL","Error","WebSocket","binaryType","_reconnector","EXPONENTIAL","min","options","force","needToDispose","retPromise","Promise","resolve","CLOSED","origOnWebSocketClose","reject","_checkConnection","TypeError","_arrayLikeToArray","r","n","Array","STOMPWebsocket","props","setProps","clientRef","useRef","subscriptionRef","currentTopicRef","_useState6","useState","isArray","_arrayWithHoles","l","t","iterator","u","f","next","done","_iterableToArrayLimit","from","_unsupportedIterableToArray","_nonIterableRest","rawMessage","setRawMessage","stompClient","subscribeToTopic","current","useEffect","concat","_clientRef$current","_send$headers","JSON","stringify","topic","_clientRef$current2","handleMessage","parse","destroy","React","propTypes","PropTypes"],"sourceRoot":""}